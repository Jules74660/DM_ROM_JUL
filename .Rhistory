population
population<-st_sfc(data = z, geometry = population)
population<-st_sfc(data = as.matrix(z), geometry = population)
population<-st_sfc(cbind(population, z))
population<-st_sfc(cbind( z, population))
#On cr?e une variable r?ponse N(100,5), pour pas avoir de valeurs n?gatives
z<-data.frame(z = rnorm(length(xy[,1]),100,5))
population<-st_sfc(cbind(z, population))
z
population
population<-st_multipoint(xy)
population<-st_sfc(cbind(z, population))
population<-st_sfc(cbind(z, xy))
population<-st_sfc(z,  geometry =  population)
population<-st_multipoint(xy)
population<-st_sfc(population)
population<-st_multipoint(xy)
xy <- as.matrix(x.coord, y.coord)
#On cr?e une variable r?ponse N(100,5), pour pas avoir de valeurs n?gatives
z<-data.frame(z = rnorm(length(xy[,1]),100,5))
population<-st_multipoint(xy)
xy <- as.matrix(x.coord, y.coord)
population<-st_multipoint(xy)
xy <- data.frame(x.coord, y.coord)
population<-st_multipoint(as.matrix(xy))
population<-st_sfc(population)
population<-st_sfc(z,  geometry =  population)
#On cr?e une variable r?ponse N(100,5), pour pas avoir de valeurs n?gatives
z<-as.matrix(rnorm(length(xy[,1]),100,5))
population<-st_sfc(z,  geometry =  population)
#On cr?e une variable r?ponse N(100,5), pour pas avoir de valeurs n?gatives
z<-data.frame(z1 = rnorm(length(xy[,1]),100,5),
z2 = rnorm(length(xy[,1]),100,5))
population<-st_sfc(z,  geometry =  population)
st_geometry(xy,z)
st_geometry(population,z)
population<-st_geometry(population,z)
ggplot(population) +
geom_sf()
population<-st_multipoint(as.matrix(xy), x = "x" , y = "y")
population<-sf_multipoint(as.matrix(xy), x = "x" , y = "y")
data(meuse, package = "sp")
meuse_sf <- st_as_sf(meuse, coords = c("x", "y"), crs = 28992, agr = "constant")
st_agr(meuse_sf)
population<-SpatialPointsDataFrame(xy,z)
opulation
population
sp_as_sf(population)
st_as_sf(population)
ggplot(population) +
geom_sf()
is(population)
population<-st_as_sf(population)
ggplot(population) +
geom_sf()
ggplot(population) +
geom_sf(fill = z1)
#On cr?e une variable r?ponse N(100,5), pour pas avoir de valeurs n?gatives
z<-data.frame(z1 = rnorm(length(xy[,1]),100,5))
population<-SpatialPointsDataFrame(xy,z)
population<-st_as_sf(population)
ggplot(population) +
geom_sf()
ggplot(population) +
geom_sf(color ="red")
ggplot(population) +
geom_sf(aes(color = z1))
summary(z)
sum(z)
SRSpts <- spsurvey::irs(population, n_base = pts, projcrs_check = FALSE)
SRSpts
SRSpts@coords
SRSpts
res_srs <-rep(list(),nsimul) # on crée une liste vide où on va mettre les résultats des 500 simulations
for (i in 1:nsimul){
SRSpts <- spsurvey::irs(population, n_base = pts, projcrs_check = FALSE)
res_srs[i] <-list(cbind(SRSpts$sites_base$X,SRSpts$sites_base$Y,SRSpts$sites_base$z1))
i<-i+1
}
head(res_srs)
sample<-res_srs[[2]]# on en prend un au hasard
plot(r)
plot(sample, add = TRUE)
plot(r)
plot(sample, add = TRUE)
ggplot(population) +
geom_sf(aes(color = z1)) +
geom_point(sample, aes( x = X, y = Y))
ggplot() +
geom_sf(population,aes(color = z1)) +
geom_point(sample, aes(x = X, y = Y))
ggplot() +
geom_sf(population,aes(color = z1))
ggplot(population) +
geom_sf(aes(color = z1))
res_srs[[2]]
SRSpts
SpatialPointsDataFrame(sample[,1:2],sample[,3])
SpatialPointsDataFrame(sample[,1:2],as.data.frame(sample[,3]))
sample_exemple <- SpatialPointsDataFrame(sample[,1:2],as.data.frame(sample[,3]))
sample_exemple<-st_as_sf(sample_exemple)
ggplot() +
geom_sf(population) +
geom_sf(sample_exemple)
ggplot() +
geom_sf(population)
plot(sample_exemple, add = TRUE)
plot(sample_exemple)
plot(population)
plot(population)
plot(sample_exemple, add = TRUE)
plot(population)
plot(sample_exemple, pch = 16, add = TRUE)
plot(sample_exemple, pch = 16)
plot(population)
plot(sample_exemple, pch = 16, add = TRUE)
plot(population)
plot(sample_exemple, pch = 16, add = TRUE)
plot(sample_exemple, pch = 16)
res_grts <-rep(list(),nsimul) # on cr?e une liste vide où on va mettre les r?sultats des 500 simulations
for (i in 1:nsimul){
GRTSpts <- spsurvey::irs(population, n_base = pts, projcrs_check = FALSE)
res_grts[i] <-list(cbind(GRTSpts$sites_base$X,GRTSpts$sites_base$Y,GRTSpts$sites_base$z1))
i<-i+1
}
head(res_grts)
plot(res_grts[[2]])
category_est(GRTSpts)
total_est(GRTSpts)
total.est(GRTSpts)
total_est <- function(totalsum, dframe, itype, lev_itype, nlev_itype, ivar,
design, design_names, var_nondetect, vartype, conf, mult,
warn_ind, warn_df) {
# Assign a value to the function name variable
fname <- "total_est"
#
# Calculate total estimates
#
if (is.null(var_nondetect)) {
# Calculate the total estimate, standard error estimate, and confidence
# bound estimates for each combination of subpopulation and response
# variable for the case where nondetects are not present
tst <- !is.na(dframe[, itype])
if (nlev_itype == 1) {
nresp <- sum(!is.na(dframe[tst, ivar]))
if (nresp == 1) {
warn_ind <- TRUE
act <- "Variance of the total estimate was not calculated.\n"
warn <- paste0("Variance of the total estimate was not calculated for subpopulation type \"", itype, "\" \nsince the number of non-missing response values equals one.\n")
warn_df <- rbind(warn_df, data.frame(
func = I(fname), subpoptype = itype, subpop = NA, indicator = ivar,
stratum = NA, warning = I(warn), action = I(act)
))
temp <- sum(dframe[tst, ivar], na.rm = TRUE)
totalest <- temp
nresp <- 1
stderr <- 0
lbound <- temp
ubound <- temp
} else {
rslt <- svytotal(
make.formula(ivar),
design = subset(design, tst), na.rm = TRUE
)
totalest <- rslt
nresp <- sum(!is.na(dframe[, ivar]))
if (vartype == "Local") {
temp <- total_localmean(
itype, lev_itype, nlev_itype, c(1), ivar, design, design_names,
totalest[1], mult, warn_ind, warn_df
)
stderr <- temp$stderr
lbound <- unlist(temp$confval[1])
ubound <- unlist(temp$confval[2])
warn_ind <- temp$warn_ind
warn_df <- temp$warn_df
} else {
stderr <- SE(rslt)
temp <- confint(rslt, level = conf / 100)
lbound <- temp[1]
ubound <- temp[2]
}
}
} else {
totalest <- rep(NA, nlev_itype)
nresp <- rep(NA, nlev_itype)
stderr <- rep(NA, nlev_itype)
lbound <- rep(NA, nlev_itype)
ubound <- rep(NA, nlev_itype)
nval <- tapply(dframe[tst, ivar], dframe[tst, itype], function(x) {
sum(!is.na(x))
})
subpop_ind <- nval > 1
if (any(!subpop_ind)) {
levs <- (1:nlev_itype)[!subpop_ind]
for (i in levs) {
tst_total <- tst & dframe[, itype] %in% lev_itype[i]
temp <- sum(dframe[tst_total, ivar], na.rm = TRUE)
totalest[i] <- temp
nresp[i] <- 1
stderr[i] <- 0
lbound[i] <- temp
ubound[i] <- temp
}
}
if (any(subpop_ind)) {
tst <- tst & dframe[, itype] %in% lev_itype[subpop_ind]
levs <- (1:nlev_itype)[subpop_ind]
rslt <- svyby(
make.formula(ivar), make.formula(itype),
design = subset(design, tst),
svytotal, na.rm = TRUE
)
totalest[levs] <- rslt[, 2]
temp <- tapply(dframe[, ivar], dframe[, itype], function(x) {
sum(!is.na(x))
})
nresp[levs] <- temp[levs]
if (vartype == "Local") {
temp <- total_localmean(
itype, lev_itype, nlev_itype, levs, ivar, design, design_names,
totalest, mult, warn_ind, warn_df
)
stderr[levs] <- temp$stderr[levs]
lbound[levs] <- unlist(temp$confval[levs, 1])
ubound[levs] <- unlist(temp$confval[levs, 2])
warn_ind <- temp$warn_ind
warn_df <- temp$warn_df
} else {
stderr[levs] <- SE(rslt)
temp <- confint(rslt, level = conf / 100)
lbound[levs] <- temp[, 1]
ubound[levs] <- temp[, 2]
}
}
}
} else {
# To be implemented
}
# Assign identifiers and estimates to the totalsum data frame
if (is.null(var_nondetect)) {
if (nlev_itype == 1) {
totalsum <- rbind(totalsum, data.frame(
Type = itype,
Subpopulation = lev_itype,
Indicator = ivar,
nResp = nresp,
Estimate = totalest[1],
StdError = stderr[1],
MarginofError = mult * stderr[1],
LCB = lbound,
UCB = ubound
))
} else {
for (i in 1:nlev_itype) {
totalsum <- rbind(totalsum, data.frame(
Type = itype,
Subpopulation = lev_itype[i],
Indicator = ivar,
nResp = nresp[i],
Estimate = totalest[i],
StdError = stderr[i],
MarginofError = mult * stderr[i],
LCB = unlist(lbound[i]),
UCB = unlist(ubound[i])
))
}
}
} else {
# To be implemented
}
# Return the totalsum data frame, the warn_ind logical value, and the warn_df
# data frame
list(totalsum = totalsum, warn_ind = warn_ind, warn_df = warn_df)
}
total_est(GRTSpts)
total_est(GRTSpts, var_nondetect = NULL, vartype = "HT")
# on crée un vecteur de probabilités d'inclusion de la même longueur que l'échantillon
inclprob<- rep((pts/nb_us), pts)
pikl=outer(inclprob,inclprob,"*")
diag(pikl)=inclprob
HT_srs<- rep(0,nsimul) # on crée un vecteur vide qui prendra les valeurs de HT pour chaque simulation
for (i in 1:nsimul){
HT_srs[i] <- HTestimator(res_srs[[i]][,3],inclprob)
i<-i+1
}
boxplot(HT_srs)
sd_HT_srs<- rep(0,nsimul) # on crée un vecteur vide qui prendra les valeurs de HT pour chaque simulation
for (i in 1:nsimul){
sd_HT_srs[i] <- sqrt(varHT(res_srs[[i]][,3], pikl, 1))
i<-i+1
}
boxplot(sd_HT_srs)
HT_grts<- rep(0,nsimul) # on crée un vecteur vide qui prendra les valeurs de HT pour chaque simulation
for (i in 1:nsimul){
HT_grts[i] <- HTestimator(res_grts[[i]][,3],inclprob)
i<-i+1
}
boxplot(HT_grts)
sd_HT_grts<- rep(0,nsimul) # on crée un vecteur vide qui prendra les valeurs de HT pour chaque simulation
for (i in 1:nsimul){
sd_HT_grts[i] <- sqrt(varHT(res_grts[[i]][,3], pikl, 1))
i<-i+1
}
boxplot(sd_HT_grts)
HT_tot<-cbind(HT_srs,HT_grts)
boxplot(HT_tot)
abline(h = sum(z), col = "red")
SSSpts <- UPsystematic(pop, pts)
SSSpts <- UPsystematic(population, pts)
pik <- inclusionprobabilities(rep(1/2500,2500),pts)
SSSpts <- UPsystematic(pik)
SSpts
SSSpts
population
data_frame(x= x.coord, y = y.coord, z = z1, sss = SSSpts)
data_frame(x= x.coord, y = y.coord, z = z, sss = SSSpts)
z
z[,1]
data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
SSSpts %>% filter(z == 1)
SSSpts
data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
SSSpts %>% filter(sss = 1)
SSSpts %>% filter(sss == 1)
res_sss <-rep(list(),nsimul) # on cr?e une liste vide où on va mettre les r?sultats des 500 simulations
pik <- inclusionprobabilities(rep(1/2500,2500),pts)
for (i in 1:nsimul){
SSSpts <- UPsystematic(pik)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
res_sss[i] <-SSSpts %>% filter(sss == 1)
i<-i+1
}
head(res_sss)
plot(res_sss[[2]])
plot(res_sss[[5]])
res_sss <-rep(list(),nsimul) # on cr?e une liste vide où on va mettre les r?sultats des 500 simulations
pik <- inclusionprobabilities(rep((pts/nb_us), pts)
for (i in 1:nsimul){
res_sss <-rep(list(),nsimul) # on cr?e une liste vide où on va mettre les r?sultats des 500 simulations
pik <- inclusionprobabilities(rep(pts/nb_us), pts))
pts/nb_us
pts
pik <- inclusionprobabilities(rep(pts/nb_us, pts))
res_sss <-rep(list(),nsimul) # on cr?e une liste vide où on va mettre les r?sultats des 500 simulations
pik <- inclusionprobabilities(rep(pts/nb_us, pts), pts)
for (i in 1:nsimul){
SSSpts <- UPsystematic(pik)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
res_sss[i] <-SSSpts %>% filter(sss == 1)
i<-i+1
}
SSSpts <- UPsystematic(pik)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
UPsystematic(pik)
UPsystematic(pik)
pik <- inclusionprobabilities(rep(pts/2500,2500),pts)
for (i in 1:nsimul){
SSSpts <- UPsystematic(pik)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
res_sss[i] <-SSSpts %>% filter(sss == 1)
i<-i+1
}
head(res_sss)
plot(res_sss[[2]])
SSSpts
UPsystematic(pik)
SSSpts %>% filter(sss == 1)
res_sss[[2]]
SSSpts %>% filter(sss == 1)
res_sss[2]
res_sss <-rep(list(),nsimul) # on cr?e une liste vide où on va mettre les r?sultats des 500 simulations
pik <- inclusionprobabilities(rep(pts/2500,2500),pts)
for (i in 1:nsimul){
SSSpts <- UPsystematic(pik)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
res_sss[i] <- SSSpts %>% filter(sss == 1)
i<-i+1
}
SSSpts <- UPsystematic(pik)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
SSSpts
SSSpts %>% filter(sss == 1)
SSSpts %>% filter(sss == 1) %>% data_frame()
SSSpts %>% filter(sss == 1) %>% as.data_frame()
SSSpts %>% filter(sss == 1) %>% as.data.frame()
res_sss <-rep(list(),nsimul) # on cr?e une liste vide où on va mettre les r?sultats des 500 simulations
pik <- inclusionprobabilities(rep(pts/2500,2500),pts)
for (i in 1:nsimul){
SSSpts <- UPsystematic(pik)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
res_sss[i] <- SSSpts %>% filter(sss == 1) %>% as.data.frame()
i<-i+1
}
head(res_sss)
plot(res_sss[2])
res_sss
res_sss <-rep(list(),nsimul) # on cr?e une liste vide où on va mettre les r?sultats des 500 simulations
pik <- inclusionprobabilities(rep(pts/2500,2500),pts)
for (i in 1:nsimul){
SSSpts <- UPsystematic(pik)
SSSpts <- data_frame(x= x.coord, y = y.coord, z = z[,1], sss = SSSpts)
res_sss[[i]] <- SSSpts %>% filter(sss == 1) %>% as.data.frame()
i<-i+1
}
head(res_sss)
plot(res_sss[2])
plot(res_sss[[2]])
res_sss[[2]]
plot(res_grts[[2]])
res_grts[[2]]
plot(res_sss[[2]][1:3])
sample<-SpatialPointsDataFrame(res_sss[[2]]# on en prend un au hasard
sample_exemple <- SpatialPointsDataFrame(sample[,1:2],as.data.frame(sample[,3]))
sample<-SpatialPointsDataFrame(res_sss[[2]])# on en prend un au hasard
sample_exemple <- SpatialPointsDataFrame(sample[,1:2],as.data.frame(sample[,3]))
sample_exemple<-st_as_sf(sample_exemple)
plot(sample_exemple, pch = 16)
plot(sample_exemple, pch = 16, main = "Exemple tirate Systématique")
sample <- res_sss[[2]]
sample_exemple <- SpatialPointsDataFrame(sample[,1:2],as.data.frame(sample[,3]))
sample_exemple<-st_as_sf(sample_exemple)
plot(sample_exemple, pch = 16, main = "Exemple tirage Systématique")
HT_sss<- rep(0,nsimul) # on crée un vecteur vide qui prendra les valeurs de HT pour chaque simulation
for (i in 1:nsimul){
HT_sss[i] <- HTestimator(res_sss[[i]][,3],inclprob)
i<-i+1
}
boxplot(HT_sss)
sd_HT_sss<- rep(0,nsimul) # on crée un vecteur vide qui prendra les valeurs de HT pour chaque simulation
for (i in 1:nsimul){
sd_HT_sss[i] <- sqrt(varHT(res_sss[[i]][,3], pikl, 1))
i<-i+1
}
boxplot(sd_HT_sss)
HT_tot<-cbind(HT_srs,HT_grts)
boxplot(HT_tot)
abline(h = sum(z), col = "red")
HT_tot<-cbind(HT_srs,HT_sss, HT_grts)
boxplot(HT_tot)
abline(h = sum(z), col = "red")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
res_srs[[1]]
varHT(res_srs[[1]][,3], pikl)
boxplot(sd_HT_sss)
HT_sss<- rep(0,nsimul) # on crée un vecteur vide qui prendra les valeurs de HT pour chaque simulation
for (i in 1:nsimul){
HT_sss[i] <- HTestimator(res_sss[[i]][,3],inclprob)
i<-i+1
}
boxplot(HT_sss)
sd_HT_sss<- rep(0,nsimul) # on crée un vecteur vide qui prendra les valeurs de HT pour chaque simulation
for (i in 1:nsimul){
sd_HT_sss[i] <- sqrt(varHT(res_sss[[i]][,3], pikl, 1))
i<-i+1
}
boxplot(sd_HT_sss)
boxplot(HT_tot, main = "Comparaison des HT")
HT_tot<-cbind(HT_srs,HT_sss, HT_grts)
boxplot(HT_tot, main = "Comparaison des HT")
abline(h = sum(z), col = "red")
sd_HT_tot<-cbind(sd_HT_srs,sd_HT_sss, sd_HT_grts)
boxplot(HT_tot, main = "Comparaison des sd HT")
abline(h = sum(z), col = "red")
HT_tot<-cbind(HT_srs,HT_sss, HT_grts)
boxplot(HT_tot, main = "Comparaison des HT")
abline(h = sum(z), col = "red")
sd_HT_tot<-cbind(sd_HT_srs,sd_HT_sss, sd_HT_grts)
boxplot(sd_HT_tot, main = "Comparaison des sd HT")
abline(h = sum(z), col = "red")
#Grille de 50 x 50 cases
side=50
my.mat <- matrix(NA, nrow=side, ncol=side)
x.coord <- rep(1:side, each=side)
y.coord <- rep(1:side, times=side)
xy <- data.frame(x.coord, y.coord)
#On cr?e une variable r?ponse N(100,5), pour pas avoir de valeurs n?gatives
z<-data.frame(z1 = rnorm(length(xy[,1]),100,5))
population<-SpatialPointsDataFrame(xy,z)
population<-st_as_sf(population)
ggplot(population) +
geom_sf(aes(color = z))
plot(population)
res_srs <-rep(list(),nsimul) # on crée une liste vide où on va mettre les résultats des 500 simulations
for (i in 1:nsimul){
SRSpts <- spsurvey::irs(population, n_base = pts, projcrs_check = FALSE)
res_srs[i] <-list(cbind(SRSpts$sites_base$X,SRSpts$sites_base$Y,SRSpts$sites_base$z))
i<-i+1
}
head(res_srs)
head(res_srs)
sample<-res_srs[[2]]# on en prend un au hasard
sample<-res_srs[[2]]# on en prend un au hasard
sample_exemple <- SpatialPointsDataFrame(sample[,1:2],as.data.frame(sample[,3]))
plot(sample_exemple, pch = 16)
sample<-res_srs[[2]]# on en prend un au hasard
sample_exemple <- SpatialPointsDataFrame(sample[,1:2],as.data.frame(sample[,3]))
sample_exemple<-st_as_sf(sample_exemple)
plot(sample_exemple, pch = 16)
unlink("~/Documents/COURS/M2_DYNEA/Sampling/TDs/TD-2 Horvitz-Thompson/Rmarkdown_cache", recursive = TRUE)
cov = CovarianceFunction(2, Exponential(.5))
pts = range(0, stop=1, length=1001)
grf = GaussianRandomField(cov, CirculantEmbedding(), pts, pts, minpadding=2001)
heatmap(grf)
install.packages("RandomFieldsUtils")
RFfractaldim(data=xy)
library(RandomFieldsUtils)
RFfractaldim(data=xy)
library(RandomFields)
install.packages(RandomFields)
